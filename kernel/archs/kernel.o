# 0 "../../../kernel.cpp"
# 0 "<built-in>"
# 0 "<command-line>"
# 1 "../../../kernel.cpp"
# 24 "../../../kernel.cpp"
# 1 "../../../kernel.h" 1
# 27 "../../../kernel.h"
# 1 "../../../../nova/common.h" 1
# 27 "../../../../nova/common.h"
# 1 "../../../../nova/common/types.h" 1
# 27 "../../../../nova/common/types.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/12/include/stdint.h" 1 3 4
# 11 "/usr/lib/gcc/x86_64-linux-gnu/12/include/stdint.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/12/include/stdint-gcc.h" 1 3 4
# 34 "/usr/lib/gcc/x86_64-linux-gnu/12/include/stdint-gcc.h" 3 4

# 34 "/usr/lib/gcc/x86_64-linux-gnu/12/include/stdint-gcc.h" 3 4
typedef signed char int8_t;


typedef short int int16_t;


typedef int int32_t;


typedef long long int int64_t;


typedef unsigned char uint8_t;


typedef short unsigned int uint16_t;


typedef unsigned int uint32_t;


typedef long long unsigned int uint64_t;




typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;
typedef long long int int_least64_t;
typedef unsigned char uint_least8_t;
typedef short unsigned int uint_least16_t;
typedef unsigned int uint_least32_t;
typedef long long unsigned int uint_least64_t;



typedef signed char int_fast8_t;
typedef int int_fast16_t;
typedef int int_fast32_t;
typedef long long int int_fast64_t;
typedef unsigned char uint_fast8_t;
typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;
typedef long long unsigned int uint_fast64_t;




typedef int intptr_t;


typedef unsigned int uintptr_t;




typedef long long int intmax_t;
typedef long long unsigned int uintmax_t;
# 12 "/usr/lib/gcc/x86_64-linux-gnu/12/include/stdint.h" 2 3 4
# 28 "../../../../nova/common/types.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/12/include/stddef.h" 1 3 4
# 145 "/usr/lib/gcc/x86_64-linux-gnu/12/include/stddef.h" 3 4
typedef int ptrdiff_t;
# 214 "/usr/lib/gcc/x86_64-linux-gnu/12/include/stddef.h" 3 4
typedef unsigned int size_t;
# 424 "/usr/lib/gcc/x86_64-linux-gnu/12/include/stddef.h" 3 4
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));






  __float128 __max_align_f128 __attribute__((__aligned__(__alignof(__float128))));

} max_align_t;






  typedef decltype(nullptr) nullptr_t;
# 29 "../../../../nova/common/types.h" 2



# 31 "../../../../nova/common/types.h"
typedef int8_t s8;
typedef int16_t s16;
typedef int32_t s32;


typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
# 28 "../../../../nova/common.h" 2
# 1 "../../../../nova/common/macros.h" 1
# 29 "../../../../nova/common.h" 2
# 1 "../../../../nova/sync/spin_lock.h" 1
# 38 "../../../../nova/sync/spin_lock.h"
class SpinLock
{
public:






    SpinLock(bool irqSave=true);





    void aqquire();





    void release();

private:
    void inline __attribute__((always_inline)) lock()
    {
        while (__atomic_test_and_set(&lock_, 2))
        {
            __builtin_ia32_pause();
        }
    }

    void inline __attribute__((always_inline)) unlock()
    {
        __atomic_clear(&lock_, 3);
    }

    volatile u32 lock_;
    unsigned long cpuFlags_;
    bool irqSave_;
};
# 30 "../../../../nova/common.h" 2
# 1 "../../../../nova/sync/spin_guard.h" 1
# 27 "../../../../nova/sync/spin_guard.h"
# 1 "../../../../nova/sync/spin_lock.h" 1
# 28 "../../../../nova/sync/spin_guard.h" 2
# 36 "../../../../nova/sync/spin_guard.h"
class SpinGuard
{
public:






    inline __attribute__((always_inline)) SpinGuard(SpinLock& lock) : lock_(lock)
    {
        lock_.aqquire();
    }





    inline __attribute__((always_inline)) ~SpinGuard()
    {
        lock_.release();
    }





    explicit SpinGuard(const SpinGuard&) = delete;





    explicit SpinGuard(SpinGuard&&) = delete;

private:
    SpinLock& lock_;
};
# 31 "../../../../nova/common.h" 2
# 28 "../../../kernel.h" 2


namespace nova
{







    void EnterPanic(const char* message, u32 data = 0x00000000);





    void HaltKernel(void);
# 54 "../../../kernel.h"
    void Log(const char* format, ...);
# 63 "../../../kernel.h"
    void Print(const char* format, ...);
}
# 25 "../../../kernel.cpp" 2
# 1 "../../../../nova/tty.h" 1
# 28 "../../../../nova/tty.h"
# 1 "../../../../nova/console/driver.h" 1
# 32 "../../../../nova/console/driver.h"
struct ConsoleDriver {
    char name[10];

    bool (*isAvailable)();
    void (*initialize)();
    void (*writeChar)(const char c);
    void (*writeLineFeed)();
    void (*enableCursor)();
    void (*updateCursor)();
    void (*disableCursor)();
    void (*flush)();
    void (*clear)();
};
# 29 "../../../../nova/tty.h" 2
# 1 "../../../../nova/common/cbuffer.h" 1
# 29 "../../../../nova/common/cbuffer.h"
# 1 "../../../../../libc/include/libc/string.h" 1



# 1 "/usr/lib/gcc/x86_64-linux-gnu/12/include/stddef.h" 1 3 4
# 5 "../../../../../libc/include/libc/string.h" 2

void* memcpy(void *dst, const void* src, int n);
void* memset(void* ptr, int value, size_t num);

char* strcat(char* destination, const char* source);

int strcmp(const char* str1, const char* str2);
int strncmp(const char* str1, const char* str2, size_t num);

char* strcpy(char* destination, const char* source);
char* strncpy(char* destination, const char* source, size_t num);

size_t strlen(const char* str);
# 30 "../../../../nova/common/cbuffer.h" 2






template<int N>
class CircularBuffer
{
public:




    CircularBuffer() :
        head_(0),
        full_(false)
    {
        clear();
    }
# 58 "../../../../nova/common/cbuffer.h"
    void push(const char* data, u32 size)
    {
        for (u32 i = 0; i < size; i++)
        {
            buffer_[head_] = data[i];
            head_ = (head_ + 1) % N;
        }

        if (head_ + size >= N)
        {
            full_ = true;
        }
    }

    void read(char* data)
    {
        if (full_)
        {
            memcpy(data, buffer_ + head_, N - head_);
            memcpy(data + N - head_, buffer_, head_);
        }
        else
        {
            memcpy(data, buffer_, head_);
        }
    }

    void clear()
    {
        for (int i = 0; i < N; i++)
        {
            buffer_[i] = 0;
        }

        head_ = 0;
    }

    bool inline __attribute__((always_inline)) isFull() const
    {
        return full_;
    }

    u32 size() const
    {
        if (full_)
        {
            return N;
        }
        else
        {
            return head_;
        }
    }

    constexpr u32 inline __attribute__((always_inline)) capacity() const
    {
        return N;
    }

private:
    u8 buffer_[N];

    u32 head_;
    bool full_;
};
# 30 "../../../../nova/tty.h" 2


namespace nova
{
    namespace priv
    {
        class TerminalInterface
        {
        public:







            TerminalInterface(const char* name, ConsoleDriver* driver);







            bool inline __attribute__((always_inline)) IsAvailable()
            {
                return console_->isAvailable();
            }







            bool Enable();





            void Disable();
# 80 "../../../../nova/tty.h"
            void Write(const char* data, size_t size);







            void Write(const char* str);





            void Flush();





            void Clear();







            bool inline __attribute__((always_inline)) IsEnabled() const
            {
                return enabled_;
            }







            inline __attribute__((always_inline)) const char* GetName() const
            {
                return name_;
            }

        private:
            inline __attribute__((always_inline)) void writeData(const char* data, size_t size);
            inline __attribute__((always_inline)) void writeData(const char* str);

            const char* name_;
            bool enabled_;

            SpinLock lock_;
            ConsoleDriver* console_;

        };
    }





    void TerminalScanDrivers();





    void inline __attribute__((always_inline)) InitializeTerminal()
    {
        TerminalScanDrivers();
    }





    void TerminalClear();
# 165 "../../../../nova/tty.h"
    void TerminalWrite(const char* data, size_t size);







    void TerminalWrite(const char* str);





    void TerminalFlush();

}
# 26 "../../../kernel.cpp" 2
# 1 "../../../../../libc/include/libc/stdlib.h" 1




int atoi(const char* str);
char* itoa(int value, char* buffer, int base);
# 27 "../../../kernel.cpp" 2

# 1 "../../../../../libc/include/libc/ctype.h" 1



int isdigit(int c);
# 29 "../../../kernel.cpp" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/12/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/12/include/stdarg.h" 3 4

# 40 "/usr/lib/gcc/x86_64-linux-gnu/12/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 99 "/usr/lib/gcc/x86_64-linux-gnu/12/include/stdarg.h" 3 4
typedef __gnuc_va_list va_list;
# 30 "../../../kernel.cpp" 2



# 32 "../../../kernel.cpp"
namespace nova
{
    namespace priv
    {

        static int printTerminal(const char* fmt, va_list args)
        {
            if (fmt == 
# 39 "../../../kernel.cpp" 3 4
                      __null
# 39 "../../../kernel.cpp"
                          ) {
                return 0;
            }

            char buffer[250];
            char temp[30];

            char* out = buffer;
            char c = 0;

            while (true)
            {
                c = *fmt++;

                if (c == '\0')
                {
                    break;
                }

                if (c != '%')
                {
                    *out++ = c;
                    continue;
                }

                c = *fmt++;
                char padchar = ' ';
                int padlen = 0;

                if (c == '0')
                {
                    padchar = '0';
                    static_cast<void>(padchar);
                    c = *fmt++;
                }

                while (isdigit(c))
                {
                    padlen = padlen * 10 + c - '0';
                    c = *fmt++;
                }

                switch (c)
                {
                    case 'c':
                    {
                        char ch = (char)
# 85 "../../../kernel.cpp" 3 4
                                       __builtin_va_arg(
# 85 "../../../kernel.cpp"
                                       args
# 85 "../../../kernel.cpp" 3 4
                                       ,
# 85 "../../../kernel.cpp"
                                       int
# 85 "../../../kernel.cpp" 3 4
                                       )
# 85 "../../../kernel.cpp"
                                                        ;
                        *out++ = ch;
                        break;
                    }
                    case 'd':
                    case 'x':
                    {
                        int num = 
# 92 "../../../kernel.cpp" 3 4
                                 __builtin_va_arg(
# 92 "../../../kernel.cpp"
                                 args
# 92 "../../../kernel.cpp" 3 4
                                 ,
# 92 "../../../kernel.cpp"
                                 int
# 92 "../../../kernel.cpp" 3 4
                                 )
# 92 "../../../kernel.cpp"
                                                  ;
                        int base = c == 'd' ? 10 : 16;

                        itoa(num, temp, base);

                        int temp_len = strlen(temp);

                        if (padlen > temp_len)
                        {
                            padlen = padlen - temp_len;

                            for (u8 i = 0; i < padlen; i++)
                            {
                                *out++ = padchar;
                            }
                        }

                        strcpy(out, temp);
                        out += strlen(temp);

                        break;
                    }
                    case 's':
                    {
                        char* str = 
# 116 "../../../kernel.cpp" 3 4
                                   __builtin_va_arg(
# 116 "../../../kernel.cpp"
                                   args
# 116 "../../../kernel.cpp" 3 4
                                   ,
# 116 "../../../kernel.cpp"
                                   char*
# 116 "../../../kernel.cpp" 3 4
                                   )
# 116 "../../../kernel.cpp"
                                                      ;
                        strcpy(out, str);
                        out += strlen(str);
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }

            *out = '\0';
            TerminalWrite(buffer);
            TerminalFlush();

            return out - buffer;
        }
    }


    void EnterPanic(const char* message, const u32 data)
    {
        asm volatile("cli");
        TerminalClear();

        Print("\n\nKernel panic!\n");
        Print("Message: %s\n", message);
        Print("Data: 0x%x\n", data);

        HaltKernel();
    }


    void HaltKernel(void)
    {
        asm volatile("cli");

        while (true) {
            asm volatile("hlt");
        }
    }


    void Log(const char* fmt, ...)
    {
        if (fmt == 
# 162 "../../../kernel.cpp" 3 4
                  __null
# 162 "../../../kernel.cpp"
                      ) {
            return;
        }

        char buffer[300];

        strcpy(buffer, "[Kernel]: ");
        strcat(buffer, fmt);
        strcat(buffer, "\n");

        va_list args;
        
# 173 "../../../kernel.cpp" 3 4
       __builtin_va_start(
# 173 "../../../kernel.cpp"
       args
# 173 "../../../kernel.cpp" 3 4
       ,
# 173 "../../../kernel.cpp"
       fmt
# 173 "../../../kernel.cpp" 3 4
       )
# 173 "../../../kernel.cpp"
                          ;
        priv::printTerminal(buffer, args);
        
# 175 "../../../kernel.cpp" 3 4
       __builtin_va_end(
# 175 "../../../kernel.cpp"
       args
# 175 "../../../kernel.cpp" 3 4
       )
# 175 "../../../kernel.cpp"
                   ;
    }


    void Print(const char* fmt, ...)
    {
        if (fmt == 
# 181 "../../../kernel.cpp" 3 4
                  __null
# 181 "../../../kernel.cpp"
                      ) {
            return;
        }

        va_list args;
        
# 186 "../../../kernel.cpp" 3 4
       __builtin_va_start(
# 186 "../../../kernel.cpp"
       args
# 186 "../../../kernel.cpp" 3 4
       ,
# 186 "../../../kernel.cpp"
       fmt
# 186 "../../../kernel.cpp" 3 4
       )
# 186 "../../../kernel.cpp"
                          ;
        priv::printTerminal(fmt, args);
        
# 188 "../../../kernel.cpp" 3 4
       __builtin_va_end(
# 188 "../../../kernel.cpp"
       args
# 188 "../../../kernel.cpp" 3 4
       )
# 188 "../../../kernel.cpp"
                   ;
    }
}
